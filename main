class Board():
    def __init__(self):
        self.cells = [" ", " ", " ", " ", " ", " ", " ", " ", " "]

    def display(self):
        print(" %s | %s | %s " %(self.cells[0], self.cells[1], self.cells[2]))
        print("___________")
        print(" %s | %s | %s " % (self.cells[3], self.cells[4], self.cells[5]))
        print("___________")
        print(" %s | %s | %s " % (self.cells[6], self.cells[7], self.cells[8]))

    def checkWinner(self, player):
        if self.cells[0] == player and self.cells[1] == player and self.cells[2] == player:
            return True
        if self.cells[3] == player and self.cells[4] == player and self.cells[5] == player:
            return True
        if self.cells[6] == player and self.cells[7] == player and self.cells[8] == player:
            return True
        if self.cells[0] == player and self.cells[3] == player and self.cells[6] == player:
            return True
        if self.cells[1] == player and self.cells[4] == player and self.cells[7] == player:
            return True
        if self.cells[2] == player and self.cells[5] == player and self.cells[8] == player:
            return True
        if self.cells[0] == player and self.cells[4] == player and self.cells[8] == player:
            return True
        if self.cells[2] == player and self.cells[4] == player and self.cells[6] == player:
            return True
        return False

    def checkTie(self):
        used_cells = 0
        for cell in self.cells:
            if cell != " ":
                used_cells += 1
            if used_cells == 9:
                return True

    def update(self, player, cell):
        self.cells[cell] = player

    def reset(self):
        self.cells = [" ", " ", " ", " ", " ", " ", " ", " ", " "]

bd = Board()

def print_rules():
    print("Here are the rules for Tic-Tac-Toe:")
    print("You are X and the other player is O. Take turns choosing squares to place your markers.")
    print("The goal of the game is to get three squares in the same row, column, or diagonal.")
    print("The game ends when a player has three squares in the same row, column, or diagonal or when all nine squares of the grid are full. Ties occur when neither player has three squares in the same row, column, or diagonal.")

def getMove(player):
    move = ' '
    while move not in '0 1 2 3 4 5 6 7 8'.split():
        print("Where would you like to move, %s" %(player))
        move = input()
        if (bd.cells[int(move)] != ' '):
            move = ' '
    return int(move)

def playAgain():
    # asks if the player wants to play again
    print('Would you like to play again? (y or n)')
    return input().lower().startswith('y')

firstTime = True
while True:
    if firstTime:
        print_rules()
        firstTime=False
    bd.display()

#assign player to be X or O

#ask for moves & change the board for each player
    moveX = getMove("X")
    bd.update("X", moveX)

    bd.display()
    moveO = getMove("O")
    bd.update("O", moveO)

#Check if O is winner
    if bd.checkWinner("O"):
        print("\nO is the winner!\n")
        if playAgain():
            bd.reset()
            firstTime=True
            continue
        else:
            break

#Check if X is winner
    if bd.checkWinner("X"):
        print("\nX is the winner!\n")
        if playAgain():
            bd.reset()
            firstTime = True
            continue
        else:
            break

#Check for a tie
    if bd.checkTie():
        print("\nYou tied!\n")
        if playAgain():
            bd.reset()
            firstTime = True
            continue
        else:
            break
